{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","nombre","email","esAdmin","genero","color","comentarios","valueToState","name","value","checked","type","setState","className","JSON","stringify","this","htmlFor","placeholder","onChange","event","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAoFeA,G,iNA/EbC,MAAQ,CACNC,OAAQ,GACRC,MAAO,GACPC,QAAS,GACTC,OAAQ,GACRC,MAAO,GACPC,YAAa,I,EAGfC,aAAe,YAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,KACrC,EAAKC,UAAS,WACZ,OAAO,eAAEJ,EAAgB,aAATG,EAAsBD,EAAUD,O,wEAK3C,IAAD,OACN,OACE,yBAAKI,UAAU,8BACb,6BAAMC,KAAKC,UAAUC,KAAKhB,MAAO,KAAM,IACvC,8BACE,2BAAOiB,QAAQ,UAAf,UACA,2BACEN,KAAK,OACLH,KAAK,SACLU,YAAY,oBACZC,SAAU,SAAAC,GAAK,OAAI,EAAKb,aAAaa,EAAMC,WAE7C,2BAAOJ,QAAQ,SAAf,SACA,2BACEN,KAAK,OACLH,KAAK,QACLU,YAAY,oBACZC,SAAU,SAAAC,GAAK,OAAI,EAAKb,aAAaa,EAAMC,WAE7C,2BAAOJ,QAAQ,WAAf,wBACA,2BACEN,KAAK,WACLH,KAAK,UACLW,SAAU,SAAAC,GAAK,OAAI,EAAKb,aAAaa,EAAMC,YAG7C,yCACA,0CACE,2BACEV,KAAK,QACLH,KAAK,SACLC,MAAM,IACNU,SAAU,SAAAC,GAAK,OAAI,EAAKb,aAAaa,EAAMC,YAG/C,2CACE,2BACEV,KAAK,QACLH,KAAK,SACLC,MAAM,IACNU,SAAU,SAAAC,GAAK,OAAI,EAAKb,aAAaa,EAAMC,YAG/C,oEACA,4BACEb,KAAK,QACLW,SAAU,SAAAC,GAAK,OAAI,EAAKb,aAAaa,EAAMC,UACzC,4BAAQZ,MAAM,IAAd,sBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,UAEJ,8CACA,8BACED,KAAK,cACLW,SAAU,SAAAC,GAAK,OAAI,EAAKb,aAAaa,EAAMC,iB,GAxErCC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.674e7577.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    nombre: '',\n    email: '',\n    esAdmin: '',\n    genero: '',\n    color: '',\n    comentarios: ''\n  };\n\n  valueToState = ({name, value, checked, type}) =>{\n    this.setState(() => {\n      return {[name]: type === \"checkbox\" ? checked : value}\n      \n    });\n  };\n\n  render(){\n    return (\n      <div className=\"container-fluid formulario\">\n        <pre>{JSON.stringify(this.state, null, 2)}</pre>\n        <form>\n          <label htmlFor=\"nombre\">Nombre</label>\n          <input \n            type=\"text\" \n            name=\"nombre\" \n            placeholder=\"Ingresa tu nombre\"\n            onChange={event => this.valueToState(event.target)}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <input \n            type=\"text\" \n            name=\"email\" \n            placeholder=\"Ejemplo@gmail.com\"\n            onChange={event => this.valueToState(event.target)}\n          />\n          <label htmlFor=\"esAdmin\">¿Es administrador?\n          <input \n            type=\"checkbox\" \n            name=\"esAdmin\" \n            onChange={event => this.valueToState(event.target)}\n          />\n          </label>\n          <label>Genero</label>\n          <label>Femenino\n            <input\n              type=\"radio\"\n              name=\"genero\"\n              value=\"F\"\n              onChange={event => this.valueToState(event.target)}\n            />\n          </label>\n          <label>Masculino\n            <input\n              type=\"radio\"\n              name=\"genero\"\n              value=\"M\"\n              onChange={event => this.valueToState(event.target)}\n            />\n          </label>\n          <label>¿Cúal es tu color favorito?</label>\n          <select\n            name=\"color\"\n            onChange={event => this.valueToState(event.target)}>\n              <option value=\"\">- Selecciona uno -</option>\n              <option value=\"Rojo\">Rojo</option>\n              <option value=\"Azul\">Azul</option>\n              <option value=\"Verde\">Verde</option>\n          </select>\n          <label>Comentarios</label>\n          <textarea \n            name=\"comentarios\"\n            onChange={event => this.valueToState(event.target)}\n          ></textarea>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}